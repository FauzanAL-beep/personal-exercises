import numpy as np
#import matplotlib.pyplot as plt
import pandas as pd
import csv
import random
import math
#
def sig(x): #activation function: sigmoid
    return 1 /(1+(math.e**-x))
def mse(tar,out): #error check (means squared error)
    return ((tar-out)**2)/2
def grad(o,t,h): #gradient descent from output
    return (o-t)*o*(1-o)*h
dataset = "./datasets/iris.csv"
df = pd.read_csv(dataset, header=None)
print(df)
#desc: 4 input node, 3 output node, 5 hidden layer's node, 1 hidden layer, 20 first weights and 15 second weights
#1st output: Iris-setosa, 2nd output: Iris-versicolor, 3rd output: Iris-virginica

#initializations
a = 0.5 #learning rate
bh = 0.35 #bias for hidden layer
bo = 0.6 #bias for output layer
w1 = np.random.rand(5,4) #weights for input - hidden layer
w2 = np.random.rand(3,5) #weights for hidden layer - output
#w1 = w1[0]
#w2 = w2[0]
print(w1)
print(w2)

testd1 = [5.1,3.5,1.4,0.2] #test data, will be changed with csv
testd1o = [1,0,0] #expected output, will be changed with csv

#testd1.append(1)
#w1.append(bh)
neth = [0,0,0,0,0]
h = [0,0,0,0,0]
neto = [0,0,0]
o = [0,0,0]

#forward pass
#-hidden layer
for i,j in enumerate(neth):
    neth[i] = np.dot(testd1,w1[i])+bh
    h[i] = sig(neth[i])
#-output layer
for i,j in enumerate(neto):
    neto[i] = np.dot(h,w2[i])+bo
    o[i] = sig(neto[i])
    
#error check
print('expected output: '+str(testd1o))
print('trainning output: '+str(o))
etot = 0 #mse(testd1o[0],o[0])+mse(testd1o[1],o[1])+mse(testd1o[2],o[2])
for i,k in enumerate(o):
    etot += mse(testd1o[i],o[i])
print('error: '+str(etot))

#backward pass
#-output layer
w2t = w2

for i,k in enumerate(w2): #for the output
    for j,l in enumerate(w2[i]): #for the weight
        w2[i][j] = w2t[i][j]-(a*grad(o[i],testd1o[i],h[j]))
        print('w['+str(i)+']['+str(j)+']: '+str(w2[i][j]))
        
#-hidden layer
#w[0][0] = w[0][0]-(((o[0]-t[0])*o[0]*(1-o[0])*w2t[0][0])+((o[1]-t[1])*o[1]*(1-o[1])*w2t[0][1])+...)*h[0]*(1-h[0])*i[0]*a
#angka dari belakang, i=loop dalem,h=loop luar,h=loop luar,(sigma di bawah), w=luar, dalem
#dalem sigma, bagian w2t[0][0], index pertama berdasar luar
for i,k in enumerate(w1): #for the hidden
    for j,l in enumerate(w1[i]):
        eouth = 0
        for n,m in enumerate(o):
            eouth += grad(o[n],testd1o[n],w2t[n][j])
        w1[i][j] = w1[i][j]-(eouth*h[i]*(1-h[i])*testd1[j]*a)
        print('w['+str(i)+']['+str(j)+']: '+str(w1[i][j]))
        
        

#print('w[0][0] = w[0][0]-(((o[0]-t[0])*o[0]*(1-o[0])*w2t[0][0])+((o[1]-t[1])*o[1]*(1-o[1])*w2t[0][1])+...)*h[0]*(1-h[0])*i[0]*a')
        
# w2[2][4] = w2t[2][4]-a*grad(o[2],testd1o[2],h[4])
# w2[2][3] = w2t[2][3]-a*grad(o[2],testd1o[2],h[3])
# w2[2][2] = w2t[2][2]-a*grad(o[2],testd1o[2],h[2])
# w2[2][1] = w2t[2][1]-a*grad(o[2],testd1o[2],h[1])
# w2[2][0] = w2t[2][0]-a*grad(o[2],testd1o[2],h[0])
# w2[1][4] = w2t[1][4]-a*grad(o[1],testd1o[1],h[4])
# w2[1][3] = w2t[1][3]-a*grad(o[1],testd1o[1],h[3])
# w2[1][2] = w2t[1][2]-a*grad(o[1],testd1o[1],h[2])
# w2[1][1] = w2t[1][1]-a*grad(o[1],testd1o[1],h[1])
# w2[1][0] = w2t[1][0]-a*grad(o[1],testd1o[1],h[0])
# w2[0][4] = w2t[0][4]-a*grad(o[0],testd1o[0],h[4])
# w2[0][3] = w2t[0][3]-a*grad(o[0],testd1o[0],h[3])
# w2[0][2] = w2t[0][2]-a*grad(o[0],testd1o[0],h[2])
# w2[0][1] = w2t[0][1]-a*grad(o[0],testd1o[0],h[1])
# w2[0][0] = w2t[0][0]-a*grad(o[0],testd1o[0],h[0])

# #forward pass
# #-for loop to number of first hidden neurons
# neth[0] = np.dot(testd1,w1[:4])+bh
# neth[1] = np.dot(testd1,w1[4:8])+bh
# neth[2] = np.dot(testd1,w1[8:12])+bh
# neth[3] = np.dot(testd1,w1[12:16])+bh
# neth[4] = np.dot(testd1,w1[16:])+bh
# #-for loop to number of first hidden neurons
# h[0] = sig(neth[0])
# h[1] = sig(neth[1])
# h[2] = sig(neth[2])
# h[3] = sig(neth[3])
# h[4] = sig(neth[4])
# #-for loop to number of output neurons
# neto[0] = np.dot(h,w2[:5])+bo
# neto[1] = np.dot(h,w2[5:10])+bo
# neto[2] = np.dot(h,w2[10:])+bo
# #-for loop to number of output neurons
# o[0] = sig(neto[0])
# o[1] = sig(neto[1])
# o[2] = sig(neto[2])

# #error check
# etot = mse(testd1o[0],o[0])+mse(testd1o[1],o[1])+mse(testd1o[2],o[2])

# #backward pass



# print("h1: "+str(h1))
# print("h2: "+str(h2))
# print("h3: "+str(h3))
# print("h4: "+str(h4))
# print("h5: "+str(h5))
